import os
import sys
import argparse
from typing import List, Tuple
from PIL import Image, ImageDraw

"""

FANSI CONVERT
=============

This Python script enables you to convert .ANS files to .FAN
for the first time in 30 years! You can also do reverse
conversions, or export PNG preview images.

Who cares? Why is this useful?

FANSI was the only ANSI art editor available for the Atari ST.
While FANSI can save artwork as cross-platform .ANS files, 
it cannot *read* them. It will only read .FAN files, its 
native format. This is a major limitation that long prevented
Atari ST sysops and BBSers from opening or modifying art that 
had been created by any other program/platform.

IMPORTANT NOTES 
---------------

1. FANSI is limited to an 80x24 canvas. When converting
   oversized .ANS files, only the initial 80x24 will be
   converted to .FAN.

2. The ANSI parser and exporter in this script are extremely
   simple/naive. They do not handle ANSImation or files with
   lots of cursor movement.

"""



# --- FANSI file format constants ---
FAN_FILE_SIZE = 36638
FAN_HEADER = bytes([0x00,0x04,0x46,0x4E,0x43,0x21])  # '\x00\x04FNC!'
FAN_CHAR_SECTION_SIZE = 5904  # 80*24*3 + sub-row headers (2 bytes per sub-row * 3 * 24)
FAN_BITMAP_HEADER = bytes([0x78,0x06,0x01,0x3F,0x00,0xBF,0x00,0x04])
FAN_BITMAP_TOTAL = 30728  # includes 8-byte header + 30720 pixel data

COLORS_ANSI_TO_FAN = {
	0: 0x00, # black
	1: 0x01, # red
	2: 0x02, # green
	3: 0x03, # yellow
	4: 0x04, # blue
	5: 0x05, # magenta
	6: 0x06, # cyan
	7: 0x07, # white
}

# FANSI color palette for output PNG (classic 16 colors; bright variants are lighter)
PALETTE_16 = [
	(0,0,0),         # 0 black
	(170,0,0),       # 1 red
	(0,170,0),       # 2 green
	(204,170,0),     # 3 yellow / brown-ish
	(0,0,170),       # 4 blue
	(170,0,136),     # 5 magenta
	(0,136,238),     # 6 cyan
	(204,204,204),   # 7 white (light gray)
	(136,136,136),   # 8 black high (dark gray)
	(238,0,0),       # 9 red high (bright)
	(0,238,0),       # 10 green high
	(238,238,0),     # 11 yellow high
	(0,0,238),       # 12 blue high
	(238,0,238),     # 13 magenta high
	(0,238,238),     # 14 cyan high
	(238,238,238),   # 15 white high (full white)
]

# FANSI font data in ansilove-C format.
FONT_FANSI = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0xfc, 0xfc, 0xfc, 0xfc, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0xfc, 0xfc, 0x30, 0x30, 0x00, 0x00, 
	0xcc, 0xcc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x30, 0x30, 
	0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0xfc, 0xfc, 
	0xfc, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0xfc, 0xfc, 0xfc, 0xfc, 
	0x30, 0x30, 0xfc, 0xfc, 0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0x00, 0x00, 
	0x30, 0x30, 0xfc, 0xfc, 0xfc, 0xfc, 0xcc, 0xcc, 0x30, 0x30, 0x30, 0x30, 
	0xfc, 0xfc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x30, 0x30, 
	0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 
	0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x3c, 0x3c, 0x0c, 0x0c, 0x00, 0x00, 
	0x30, 0x30, 0xfc, 0xfc, 0xcc, 0xcc, 0xfc, 0xfc, 0xcc, 0xcc, 0xfc, 0xfc, 
	0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3f, 0x3f, 
	0x0c, 0x0c, 0x0f, 0x0f, 0x0c, 0x0c, 0x00, 0x00, 0x30, 0x30, 0x3c, 0x3c, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 
	0xf0, 0xf0, 0xc0, 0xc0, 0xfc, 0xfc, 0xf0, 0xf0, 0x3c, 0x3c, 0x30, 0x30, 
	0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
	0x33, 0x33, 0xff, 0xff, 0x30, 0x30, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 
	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xf3, 0xf3, 0xc3, 0xc3, 0x00, 0x00, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x3c, 
	0x0c, 0x0c, 0x00, 0x00, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 
	0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 
	0xfc, 0xfc, 0x0c, 0x0c, 0x0c, 0x0c, 0xfc, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 
	0xfc, 0xfc, 0x00, 0x00, 0xfc, 0xfc, 0x0c, 0x0c, 0x0c, 0x0c, 0xfc, 0xfc, 
	0x0c, 0x0c, 0x0c, 0x0c, 0xfc, 0xfc, 0x00, 0x00, 0x3c, 0x3c, 0xfc, 0xfc, 
	0xfc, 0xfc, 0xfc, 0xfc, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00, 
	0x3c, 0x3c, 0xc0, 0xc0, 0x3c, 0x3c, 0xcc, 0xcc, 0xf0, 0xf0, 0x0c, 0x0c, 
	0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 
	0x30, 0x30, 0xfc, 0xfc, 0x30, 0x30, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0xf0, 0xf0, 0xc0, 0xc0, 0xf0, 0xf0, 0xc0, 0xc0, 0xfc, 0xfc, 0x30, 0x30, 
	0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 
	0x30, 0x30, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 
	0xff, 0xff, 0xcc, 0xcc, 0xcc, 0xcc, 0xff, 0xff, 0xcc, 0xcc, 0x00, 0x00, 
	0x30, 0x30, 0xfc, 0xfc, 0xc0, 0xc0, 0xfc, 0xfc, 0x0c, 0x0c, 0xfc, 0xfc, 
	0x30, 0x30, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x0c, 0x0c, 0x30, 0x30, 
	0xc0, 0xc0, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 
	0xcc, 0xcc, 0x30, 0x30, 0xcf, 0xcf, 0xcc, 0xcc, 0xf3, 0xf3, 0x00, 0x00, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x3c, 0xf0, 0xf0, 0xc0, 0xc0, 0xc0, 0xc0, 
	0xc0, 0xc0, 0xf0, 0xf0, 0x3c, 0x3c, 0x00, 0x00, 0xf0, 0xf0, 0x3c, 0x3c, 
	0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x3c, 0xf0, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0xcc, 0xcc, 0x30, 0x30, 0xfc, 0xfc, 0x30, 0x30, 0xcc, 0xcc, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 
	0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0xc0, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 
	0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 
	0x0c, 0x0c, 0x30, 0x30, 0xc0, 0xc0, 0xcc, 0xcc, 0xfc, 0xfc, 0x00, 0x00, 
	0x30, 0x30, 0xcc, 0xcc, 0x0c, 0x0c, 0x30, 0x30, 0x0c, 0x0c, 0xcc, 0xcc, 
	0x30, 0x30, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 
	0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 0xfc, 0xfc, 0xc0, 0xc0, 
	0xf0, 0xf0, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x30, 0x30, 0x00, 0x00, 
	0x30, 0x30, 0xcc, 0xcc, 0xc0, 0xc0, 0xf0, 0xf0, 0xcc, 0xcc, 0xcc, 0xcc, 
	0x30, 0x30, 0x00, 0x00, 0xfc, 0xfc, 0x0c, 0x0c, 0x0c, 0x0c, 0x30, 0x30, 
	0x30, 0x30, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 
	0xcc, 0xcc, 0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 0x00, 0x00, 
	0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0x3c, 0x3c, 0x0c, 0x0c, 0xcc, 0xcc, 
	0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 
	0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0xc0, 0xc0, 
	0x00, 0x00, 0x0c, 0x0c, 0x30, 0x30, 0xc0, 0xc0, 0x30, 0x30, 0x0c, 0x0c, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 
	0x30, 0x30, 0x0c, 0x0c, 0x30, 0x30, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x30, 0x30, 0xcc, 0xcc, 0x0c, 0x0c, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 
	0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 0xfc, 0xfc, 0xfc, 0xfc, 
	0xfc, 0xfc, 0xc0, 0xc0, 0x3c, 0x3c, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 
	0xf0, 0xf0, 0xcc, 0xcc, 0xcc, 0xcc, 0xf0, 0xf0, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xf0, 0xf0, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 
	0xc0, 0xc0, 0xcc, 0xcc, 0x30, 0x30, 0x00, 0x00, 0xf0, 0xf0, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xf0, 0xf0, 0x00, 0x00, 
	0xfc, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xf0, 0xf0, 0xc0, 0xc0, 0xc0, 0xc0, 
	0xfc, 0xfc, 0x00, 0x00, 0xfc, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xf0, 0xf0, 
	0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x3c, 0x3c, 0xc0, 0xc0, 
	0xc0, 0xc0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x3c, 0x3c, 0x00, 0x00, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0x00, 0x00, 0xfc, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 
	0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 0x00, 0x00, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xf0, 0xf0, 0xf0, 0xf0, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 
	0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xfc, 0x00, 0x00, 0xcc, 0xcc, 0xfc, 0xfc, 
	0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 
	0xf0, 0xf0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 0x00, 0x00, 0xf0, 0xf0, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xf0, 0xf0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 
	0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xf0, 0xf0, 
	0x0c, 0x0c, 0x00, 0x00, 0xf0, 0xf0, 0xcc, 0xcc, 0xcc, 0xcc, 0xf0, 0xf0, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 
	0xc0, 0xc0, 0x30, 0x30, 0x0c, 0x0c, 0xcc, 0xcc, 0x30, 0x30, 0x00, 0x00, 
	0xfc, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0x3c, 0x3c, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0xfc, 0xfc, 
	0xcc, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 0x30, 0x30, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 
	0xfc, 0xfc, 0xcc, 0xcc, 0x0c, 0x0c, 0x30, 0x30, 0xc0, 0xc0, 0xcc, 0xcc, 
	0xfc, 0xfc, 0x00, 0x00, 0xfc, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 
	0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xfc, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 
	0xfc, 0xfc, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 
	0xfc, 0xfc, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0x00, 0x00, 0xc0, 0xc0, 0x30, 0x30, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0x0c, 0x0c, 
	0x3c, 0x3c, 0xcc, 0xcc, 0x3c, 0x3c, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 
	0xf0, 0xf0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xf0, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x3c, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 
	0x3c, 0x3c, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x3c, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x30, 0x30, 0xcc, 0xcc, 0xfc, 0xfc, 0xc0, 0xc0, 0x3c, 0x3c, 0x00, 0x00, 
	0x0c, 0x0c, 0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3c, 0xcc, 0xcc, 
	0xcc, 0xcc, 0x3c, 0x3c, 0x0c, 0x0c, 0xf0, 0xf0, 0xc0, 0xc0, 0xc0, 0xc0, 
	0xf0, 0xf0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 
	0x30, 0x30, 0x00, 0x00, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
	0xfc, 0xfc, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 
	0xcc, 0xcc, 0xf0, 0xf0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 
	0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
	0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xfc, 0xfc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf0, 0xf0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xf0, 0xf0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x3c, 0x3c, 0xcc, 0xcc, 0xcc, 0xcc, 0x3c, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 
	0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xcc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 
	0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3c, 0xc0, 0xc0, 
	0x30, 0x30, 0x0c, 0x0c, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 
	0xfc, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0c, 0x0c, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0xcc, 0xcc, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 0xcc, 0xcc, 
	0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0x3c, 0x3c, 0x0c, 0x0c, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xfc, 0x0c, 0x0c, 0x30, 0x30, 0xc0, 0xc0, 0xfc, 0xfc, 0x00, 0x00, 
	0x0c, 0x0c, 0x30, 0x30, 0x30, 0x30, 0xc0, 0xc0, 0x30, 0x30, 0x30, 0x30, 
	0x0c, 0x0c, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xc0, 0xc0, 0x30, 0x30, 
	0x30, 0x30, 0x0c, 0x0c, 0x30, 0x30, 0x30, 0x30, 0xc0, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x33, 0x33, 0xff, 0xff, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 
	0xcc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0xcc, 0xcc, 0x30, 0x30, 0xf0, 0xf0, 
	0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0x3c, 0x3c, 0x00, 0x00, 0x0c, 0x0c, 0x30, 0x30, 0x00, 0x00, 0x3c, 0x3c, 
	0xfc, 0xfc, 0xc0, 0xc0, 0x3c, 0x3c, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 
	0x00, 0x00, 0xf0, 0xf0, 0x0c, 0x0c, 0xfc, 0xfc, 0x3c, 0x3c, 0x00, 0x00, 
	0xcc, 0xcc, 0x00, 0x00, 0xf0, 0xf0, 0x0c, 0x0c, 0x3c, 0x3c, 0xcc, 0xcc, 
	0x3c, 0x3c, 0x00, 0x00, 0x30, 0x30, 0x0c, 0x0c, 0x00, 0x00, 0xf0, 0xf0, 
	0x0c, 0x0c, 0xfc, 0xfc, 0x3c, 0x3c, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 
	0x00, 0x00, 0xf0, 0xf0, 0x0c, 0x0c, 0xfc, 0xfc, 0x3c, 0x3c, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xfc, 
	0x30, 0x30, 0xf0, 0xf0, 0x30, 0x30, 0xcc, 0xcc, 0x00, 0x00, 0x3c, 0x3c, 
	0xfc, 0xfc, 0xc0, 0xc0, 0x3c, 0x3c, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x00, 
	0x30, 0x30, 0xcc, 0xcc, 0xfc, 0xfc, 0xc0, 0xc0, 0x3c, 0x3c, 0x00, 0x00, 
	0xc0, 0xc0, 0x30, 0x30, 0x00, 0x00, 0x3c, 0x3c, 0xfc, 0xfc, 0xc0, 0xc0, 
	0x3c, 0x3c, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 
	0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 
	0x00, 0x00, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0x00, 0x00, 
	0xc0, 0xc0, 0x30, 0x30, 0x00, 0x00, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 
	0xfc, 0xfc, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 
	0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 
	0x30, 0x30, 0xcc, 0xcc, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 
	0x0c, 0x0c, 0x30, 0x30, 0xfc, 0xfc, 0xc0, 0xc0, 0xf0, 0xf0, 0xc0, 0xc0, 
	0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0x3c, 0x3c, 
	0xfc, 0xfc, 0xf0, 0xf0, 0x3c, 0x3c, 0x00, 0x00, 0x3c, 0x3c, 0x30, 0x30, 
	0xf0, 0xf0, 0xfc, 0xfc, 0xf0, 0xf0, 0xf0, 0xf0, 0xfc, 0xfc, 0x00, 0x00, 
	0x30, 0x30, 0xcc, 0xcc, 0x00, 0x00, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xfc, 0xfc, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0x00, 0x00, 0xc0, 0xc0, 0x30, 0x30, 
	0x00, 0x00, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0x00, 0x00, 
	0x30, 0x30, 0xcc, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0x3c, 0x3c, 0x00, 0x00, 0xc0, 0xc0, 0x30, 0x30, 0x00, 0x00, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0x3c, 0x3c, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x00, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0x0c, 0x0c, 0xfc, 0xfc, 
	0xcc, 0xcc, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0x30, 0x30, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0x3c, 0x3c, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 
	0xfc, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xfc, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0xcc, 0xcc, 0xc0, 0xc0, 0xf0, 0xf0, 0xc0, 0xc0, 0xc0, 0xc0, 
	0xfc, 0xfc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 
	0xfc, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0xf0, 0xf0, 0xcc, 0xcc, 
	0xf0, 0xf0, 0xc0, 0xc0, 0xcc, 0xcc, 0xff, 0xff, 0x0c, 0x0c, 0x0f, 0x0f, 
	0x3c, 0x3c, 0x30, 0x30, 0xfc, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
	0xc0, 0xc0, 0x00, 0x00, 0x0c, 0x0c, 0x30, 0x30, 0x00, 0x00, 0xf0, 0xf0, 
	0x0c, 0x0c, 0xfc, 0xfc, 0x3c, 0x3c, 0x00, 0x00, 0x0c, 0x0c, 0x30, 0x30, 
	0x00, 0x00, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0x00, 0x00, 
	0x0c, 0x0c, 0x30, 0x30, 0x00, 0x00, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xfc, 0xfc, 0x00, 0x00, 0x0c, 0x0c, 0x30, 0x30, 0x00, 0x00, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0x3c, 0x3c, 0x00, 0x00, 0x33, 0x33, 0xcc, 0xcc, 
	0x00, 0x00, 0xf0, 0xf0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 
	0x33, 0x33, 0xcc, 0xcc, 0x00, 0x00, 0xf0, 0xf0, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0x0c, 0x0c, 0x3c, 0x3c, 
	0xcc, 0xcc, 0x3c, 0x3c, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x30, 0x30, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 0x00, 0x00, 0xfc, 0xfc, 
	0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0xc0, 0xc0, 
	0xcc, 0xcc, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 
	0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xfc, 0xfc, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 
	0xc0, 0xc0, 0xcc, 0xcc, 0x30, 0x30, 0xcc, 0xcc, 0x3c, 0x3c, 0x0c, 0x0c, 
	0x3c, 0x3c, 0x00, 0x00, 0xc0, 0xc0, 0xcc, 0xcc, 0x30, 0x30, 0xcc, 0xcc, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 
	0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
	0x00, 0x00, 0x00, 0x00, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x33, 0x33, 
	0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x00, 
	0xcc, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x00, 
	0xcc, 0xcc, 0xcc, 0xcc, 0x33, 0x33, 0x33, 0x33, 0xcc, 0xcc, 0xcc, 0xcc, 
	0x33, 0x33, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 
	0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xf0, 0x30, 0x30, 
	0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0x30, 0x30, 
	0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x0c, 0x0c, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0x0c, 0x0c, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xf0, 0x30, 0x30, 
	0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3f, 0x3f, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0xff, 0xff, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0x3f, 0x3f, 0x30, 0x30, 0x3f, 0x3f, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcf, 0xcf, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcf, 0xcf, 0xc0, 0xc0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xc0, 0xcf, 0xcf, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcf, 0xcf, 0x00, 0x00, 
	0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0x00, 0x00, 0xcf, 0xcf, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcf, 0xcf, 0xc0, 0xc0, 0xcf, 0xcf, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
	0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcf, 0xcf, 0x00, 0x00, 0xcf, 0xcf, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0x30, 0x30, 0x30, 0x30, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 
	0x3f, 0x3f, 0x30, 0x30, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x30, 0x30, 0x3f, 0x3f, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0x30, 0x30, 0x30, 0x30, 0xff, 0xff, 0x30, 0x30, 0xff, 0xff, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xf0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 
	0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
	0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
	0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x33, 0x33, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x33, 0x33, 0x00, 0x00, 
	0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0xf0, 0xf0, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xf0, 0xf0, 0xc0, 0xc0, 0x00, 0x00, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xfc, 0xfc, 0xc0, 0xc0, 0x30, 0x30, 0x0c, 0x0c, 0x30, 0x30, 0xc0, 0xc0, 
	0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xff, 0xff, 0xc0, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0x30, 0x30, 0xfc, 0xfc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xfc, 0xfc, 0x30, 0x30, 0xfc, 0xfc, 0x00, 0x00, 0x30, 0x30, 
	0xcc, 0xcc, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 0x00, 0x00, 
	0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 
	0xcc, 0xcc, 0x00, 0x00, 0x0c, 0x0c, 0x33, 0x33, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 0x00, 0x00, 0x0c, 0x0c, 0x30, 0x30, 
	0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x30, 0x30, 0xc0, 0xc0, 
	0x30, 0x30, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 
	0xfc, 0xfc, 0x30, 0x30, 0x3c, 0x3c, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xfc, 
	0xc0, 0xc0, 0xc0, 0xc0, 0x3c, 0x3c, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 
	0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0xfc, 0xfc, 
	0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0x30, 0x30, 
	0x30, 0x30, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0xc0, 0xc0, 0x30, 0x30, 
	0x0c, 0x0c, 0x30, 0x30, 0xc0, 0xc0, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 
	0x0c, 0x0c, 0x30, 0x30, 0xc0, 0xc0, 0x30, 0x30, 0x0c, 0x0c, 0x00, 0x00, 
	0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x33, 0x33, 0x30, 0x30, 
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0c, 0x0c, 0x0c, 0x0c, 
	0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x30, 0x30, 0x00, 0x00, 
	0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x30, 0x30, 
	0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x33, 0x33, 0xcc, 0xcc, 0x00, 0x00, 
	0x33, 0x33, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0xcc, 0xcc, 
	0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x30, 0x30, 0xfc, 0xfc, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0c, 0x0c, 
	0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x3c, 0x3c, 0x0c, 0x0c, 0x00, 0x00, 
	0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0x0c, 0x0c, 0x30, 0x30, 0xc0, 0xc0, 
	0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 
	0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
]


# ==================
# PILLOW SUPPORT ROUTINES
# ==================

def render_char(fontdata, char, scale=0.5, fg=(255,255,255), bg=(0,0,0)):
	"""
	Render a character from 8x16 font data into a Pillow image.
	
	fontdata: list of 4096 bytes
	code: ASCII code (0x00-0xFF)
	scale: integer scaling factor
	fg/bg: foreground/background colors (RGB tuples)
	"""
	char_height = 16
	char_width = 8
	bytes_per_char = char_height
	
	# Allow passing either int or str
	if isinstance(char, str):
		if len(char) != 1:
			raise ValueError('char must be a single character or an int code')
		code = ord(char)
	elif isinstance(char, int):
		code = char
	else:
		raise TypeError('char must be int or str')

	if not (0 <= code < 256):
		raise ValueError(f'ASCII code must be between 0 and 255. Got {code}')

	# locate offset in font array
	offset = code * bytes_per_char
	glyph = fontdata[offset:offset+bytes_per_char]
	
	# make an image
	img = Image.new('RGB', (char_width, char_height), bg)
	pixels = img.load()
	
	# unpack bits
	for y, row in enumerate(glyph):
		for x in range(char_width):
			if row & (0x80 >> x):  # MSB is left pixel
				pixels[x, y] = fg
	
	# upscale (optional)
	if scale != 1:
		img = img.resize((int(char_width*scale), int(char_height*scale)), Image.NEAREST)
	
	return img


# ==================
# FAN CHAR DATA PARSING / RENDERING
# ==================

def fan_char_to_grid(data: bytes) -> List[List[Tuple[int,int,int]]]:
	"""
	Input: the 5904-byte character data block (as in FAN file, after header).
	Output: a 24x80 list of tuples (charcode, bg_attr, fg_attr)
	"""
	if len(data) < FAN_CHAR_SECTION_SIZE:
		raise ValueError('Character data section too small')

	# Create an grid of empty cells (space char with black bg and white fg).
	# In the future I should use Nones here instead, to be explicit about emptiness.
	grid = [[(32,0,7) for _ in range(80)] for __ in range(24)]

	# The spec: 24 rows, each row has 3 sub-rows of 82 bytes: [0x00,0x50] + 80 bytes.
	offset = 0
	for row in range(24):
		subrows = []
		for sub in range(3):
			header = data[offset:offset+2]
			if header != b'\x00\x50':
				# tolerate but warn
				# raise ValueError(f'Unexpected subrow header {header!r} at row {row} sub {sub}')
				pass
			offset += 2
			bytes80 = data[offset:offset+80]
			if len(bytes80) < 80:
				raise ValueError('Truncated character sub-row')
			subrows.append(bytes80)
			offset += 80
		# subrows[0] = char codes, subrows[1]=bg, subrows[2]=fg
		for col in range(80):
			ch = subrows[0][col]
			bg = subrows[1][col]
			fg = subrows[2][col]
			grid[row][col] = (ch, bg, fg)
	return grid

def grid_to_fan_char(grid: List[List[Tuple[int,int,int]]]) -> bytes:
	"""
	Given a 24x80 grid of (ch, bg, fg), build the 5904-byte character data section.
	"""
	out = bytearray()
	for row in range(24):
		# subrow 1: charcodes
		out.extend(b'\x00\x50')
		for col in range(80):
			ch = grid[row][col][0] if col < len(grid[row]) else 32
			out.append(ch & 0xFF)
		# subrow 2: bg
		out.extend(b'\x00\x50')
		for col in range(80):
			bg = grid[row][col][1] & 0xFF
			out.append(bg)
		# subrow 3: fg
		out.extend(b'\x00\x50')
		for col in range(80):
			fg = grid[row][col][2] & 0xFF
			out.append(fg)
	if len(out) != FAN_CHAR_SECTION_SIZE:
		raise ValueError(f'Built char section length {len(out)} != {FAN_CHAR_SECTION_SIZE}')
	return bytes(out)

# ==================
# FAN FILE HANDLING
# ==================

def read_fan_file(path: str):
	raw = open(path,'rb').read()
	if len(raw) != FAN_FILE_SIZE:
		raise ValueError(f'FAN file must be exactly {FAN_FILE_SIZE} bytes; got {len(raw)}')
	if raw[0:6] != FAN_HEADER:
		raise ValueError('FAN header mismatch')
	char_section = raw[6:6+FAN_CHAR_SECTION_SIZE]
	bitmap_section = raw[6+FAN_CHAR_SECTION_SIZE:6+FAN_CHAR_SECTION_SIZE+FAN_BITMAP_TOTAL]
	# bitmap_section begins with 8-byte header
	if bitmap_section[0:8] != FAN_BITMAP_HEADER:
		# Tolerate but warn
		pass
	bitmap_data = bitmap_section[8:]
	if len(bitmap_data) != 30720:
		raise ValueError('Bitmap data size incorrect')
	grid = fan_char_to_grid(char_section)
	return {
		'grid': grid,
		'bitmap': bitmap_data,
		'bitmap_header': bitmap_section[0:8]
	}

def write_fan_file(path: str, grid: List[List[Tuple[int,int,int]]], bitmap_bytes: bytes=None):
	"""
	Build and write a .FAN file from the given 24x80 grid and optional bitmap (raw 30720 bytes).
	If bitmap_bytes is None, it will be filled with zeros (still include the 8-byte header).
	"""
	if bitmap_bytes is None:
		bitmap_section = FAN_BITMAP_HEADER + bytes(30720)
	else:
		if len(bitmap_bytes) != 30720:
			raise ValueError('bitmap_bytes must be exactly 30720 bytes')
		bitmap_section = FAN_BITMAP_HEADER + bitmap_bytes
	char_section = grid_to_fan_char(grid)
	out = bytearray()
	out.extend(FAN_HEADER)
	out.extend(char_section)
	out.extend(bitmap_section)
	# pad to FAN_FILE_SIZE if necessary (shouldn't be)
	if len(out) != FAN_FILE_SIZE:
		raise ValueError(f'Built FAN filesize {len(out)} != expected {FAN_FILE_SIZE}')
	open(path,'wb').write(bytes(out))


# ==================
# ANSI PARSING / RENDERING
# ==================

def ansi_to_grid(ans_text: str, width=80, height=24) -> List[List[Tuple[int,int,int]]]:
	"""
	VERY simple ANSI parser:
	- Supports ESC [ ... m  (SGR codes) for changing colors.
	- Interprets newline (\n), carriage return (\r), and backspace (\b).
	- Supports ESC ... C (cursor forward),
	- Does not support other cursor positioning codes yet.
	Returns a 24x80 grid of (charcode, bg_attr, fg_attr) where attributes are FAN attribute bytes.
	"""
	ESC = '\x1b'
	grid = [[(32,0x00,0x07) for _ in range(width)] for __ in range(height)]
	cur_x = 0
	cur_y = 0
	fg = 0x07
	bg = 0x00
	bright = False

	i = 0
	ans_length = len(ans_text)
	while i < ans_length:
		c = ans_text[i]
		if c == ESC:
			# naive CSI parser
			if i+1 < ans_length and ans_text[i+1] == '[':
				i += 2
				params = ''
				while i < ans_length and not (ans_text[i].isalpha()):
					params += ans_text[i]
					i += 1
				if i >= ans_length:
					break
				cmd = ans_text[i]

				# CSI C - Cursor Forward
				if cmd == 'C':
					if params == '':
						num = 0
					else:
						num = int(params)
					if cur_x < 79:
						cur_x = min(79, cur_x+num)

				# CSI m - Select Graphic Rendition (SGR)
				if cmd == 'm':
					if params == '':
						nums = [0]
					else:
						nums = [int(x) if x != '' else 0 for x in params.split(';')]
					for n in nums:
						if n == 0:
							fg = 0x07; bg = 0x00; bright = False
						elif 30 <= n <= 37:
							fg = COLORS_ANSI_TO_FAN[n-30]
							if bright:
								fg = (fg & 0x07) | 0x08
						elif 40 <= n <= 47:
							bg = COLORS_ANSI_TO_FAN[n-40]
							if bright:
								fg = (fg & 0x07) | 0x08
						elif 90 <= n <= 97:
							fg = COLORS_ANSI_TO_FAN[n-90] | 0x08
							if bright:
								fg = (fg & 0x07) | 0x08
						elif n == 1:
							bright = True
							fg = (fg & 0x07) | 0x08
						elif n == 22:
							bright = False
							fg = fg & 0x07
						# PARSE OTHER SGR CODES HERE 
						else:
							# ignore other SGI codes for now
							pass

				# PARSE OTHER CSI SEQUENCES HERE - TK TK TK
				else:
					# ignore other CSI sequences for now.
					pass

			# PARSE STANDALONE ESC SEQUENCES HERE - TK TK TK
			else:
				# standalone ESC or unknown sequence: ignore
				i += 1

		# New line
		elif c == '\n':
			cur_x = 0
			cur_y += 1
			if cur_y >= height:
				break

		# Carriage return
		elif c == '\r':
			cur_x = 0

		# Backspace
		elif c == '\b':
			cur_x = max(0, cur_x-1)

		# Other characters
		else:
			# printable char
			if 0 <= cur_x < width and 0 <= cur_y < height:
				grid[cur_y][cur_x] = (ord(c), bg & 0x07, fg & 0x0F)
			cur_x += 1
			if cur_x >= width:
				cur_x = 0
				cur_y += 1
				if cur_y >= height:
					break
		i += 1
	return grid


def grid_to_ansi(grid: List[List[Tuple[int,int,int]]]) -> str:
	"""
	Generate an ANSI text file from 24x80 grid. 
	Emit SGR escape sequences when colors or attributes change.
	"""
	ESC = '\x1b'
	out_lines = []
	cur_bright = None
	cur_fg = None
	cur_bg = None

	for row in grid:
		trailing_empty = 0
		line_chunks = []
		chunk = ''

		# Check if there is a sequence of empty characters at the end of the row.
		# Empty is defined as a space char with black background and white foreground.
		# However I will redo this in the GRID format later to make them each None.
		for ch, bg, fg in reversed(row):
			if (ch, bg, fg) == (32, 0, 7):
				trailing_empty += 1
			else:
				break
		row_len = len(row) - trailing_empty

		# Now process each non-empty character in this row.
		for (ch,bg,fg) in row[0:row_len]:

			# BACKGROUND
			if bg is None:
				bg_val = 49
			else:
				bg_val = 40 + (bg & 0x07)

			# FOREGROUND
			fg_val = 30 + (fg & 0x07)

			# BRIGHTNESS
			bright_val = int((fg & 0x08) != 0)

			if (fg_val != cur_fg) or (bg_val != cur_bg) or (bright_val != cur_bright):
				# flush chunk
				if chunk:
					line_chunks.append(chunk)
					chunk = ''

				# build SGR
				sgr = []

				sgr_seq = f'{ESC}['
				seq_parts = []

				if bright_val != cur_bright:
					seq_parts.append(f'{bright_val}')

				if fg_val != cur_fg or (bright_val == 0 and cur_bright == 1):
					seq_parts.append(f'{fg_val}')

				if bg_val != cur_bg or (bright_val == 0 and cur_bright == 1):
					seq_parts.append(f'{bg_val}')

				sgr_seq += ';'.join(seq_parts)
				sgr_seq += 'm'

				line_chunks.append(sgr_seq)

				cur_fg = fg_val
				cur_bg = bg_val
				cur_bright = bright_val

			line_chunks.append(chr(ch))

		# Join all chunks into a single line, then append to out_lines array.
		out_lines.append(''.join(line_chunks))

		# If this line was shorter than 80 chars, append a newline
		if trailing_empty != 0:
			out_lines.append('\n')


	# If I allow 80 columns, then we DO NOT want newlines.
	# If, in the future I restrict to 79 cols, then we DO want newlines.
	return ''.join(out_lines)
	# return '\n'.join(out_lines)

# ==================
# FAN SCREEN DATA RENDERING
# ==================

def image_to_atari_planar_bytes(img: Image.Image) -> bytes:
	"""
	Input:  PIL image with size exactly (320,192) and mode 'P' or 'RGB' where pixel colors
			are palette indices 0..15.
	Output: 30720 bytes = 192 rows × (20 word-groups per row × 4 planes × 2 bytes per word).
	Layout: Pixels are stored in Atari ST low-resolution planar format (4 bitplanes).
			Each 16-pixel group is packed into one 16-bit word per plane, with bit 15
			representing the leftmost pixel and bit 0 the rightmost.
			Words are written in plane order: plane 0 (LSB) first, then plane 1, plane 2,
			and plane 3 (MSB). This matches the standard ST screen memory layout.

	   Pixels (0..15)
	   |
	   v
	+-------------------------------+
	| p0 p1 p2 ...           ... p15|
	+-------------------------------+

	Plane 0 word: [b0(p0)..b0(p15)] → 16 bits → stored first
	Plane 1 word: [b1(p0)..b1(p15)] → 16 bits → stored next
	Plane 2 word: [b2(p0)..b2(p15)] → 16 bits → stored next
	Plane 3 word: [b3(p0)..b3(p15)] → 16 bits → stored next
	"""

	if img.size != (320,192):
		raise ValueError('Image must be 320x192')
	rgb = img.convert('RGB')
	pixels = rgb.load()

	# I should rewrite grid_to_image() to add option to produce palette-based image.
	# It's a waste of resources reversing the RGB colors back to palette indices, 
	# when they were derived from a palette in the first place.
	def nearest_palette_idx(color):
		r,g,b = color
		best = 0; bd = 1e9
		for i,pc in enumerate(PALETTE_16):
			dr = r-pc[0]; dg=g-pc[1]; db=b-pc[2]
			d = dr*dr+dg*dg+db*db
			if d < bd:
				bd = d; best = i
		return best

	indices = [[nearest_palette_idx(pixels[x,y]) for x in range(320)] for y in range(192)]
	out = bytearray()

	words_per_row = 320 // 16  # 20 words
	for y in range(192):
		for word_col in range(words_per_row):
			plane_words = [0,0,0,0]
			for bit_idx in range(16):
				x = word_col*16 + bit_idx
				pix = indices[y][x] & 0x0F
				for plane in range(4):
					bit = (pix >> plane) & 1
					plane_words[plane] = (plane_words[plane] << 1) | bit
			# append in plane order: plane0, plane1, plane2, plane3
			for plane in range(4):
				out.extend(plane_words[plane].to_bytes(2, byteorder='big'))

	if len(out) != 30720:
		raise ValueError(f'Built planar bitmap length {len(out)} != 30720')
	return bytes(out)


# ==================
# GRID TO PNG
# ==================

def grid_to_image(grid: List[List[Tuple[int,int,int]]], scale=1) -> Image.Image:
	"""
	Create a 320x192 image from 24x80 grid. Each cell is 4x8 pixels.
	Rendering: fill background with bg color; for non-space characters, draw a simple 3x6 'glyph-ish'
	block centered in the cell in the foreground color. This is intentionally simple; provide a font
	bitmap to generate exact glyphs.
	"""
	img_width, img_height = 320, 192
	img = Image.new('RGB',(img_width,img_height), PALETTE_16[0])
	draw = ImageDraw.Draw(img)
	cell_w, cell_h = 4, 8
	for row in range(24):
		for col in range(80):
			ch, bg, fg = grid[row][col]
			bg_rgb = PALETTE_16[bg & 0x0F]
			fg_rgb = PALETTE_16[fg & 0x0F]
			x0 = col*cell_w
			y0 = row*cell_h
			char_img = render_char(FONT_FANSI, ch, scale=0.5, fg=fg_rgb, bg=bg_rgb)
			img.paste(char_img, (x0, y0))
	if scale != 1:
		img = img.resize((img_width*scale, img_height*scale), Image.NEAREST)
	return img

# ==================
# CONVERSION METHODS
# ==================

def fan_to_ans(fan_path: str, ans_path: str, png_path: str=None, png_scale: int=1):
	# Parse FAN character data and generate character grid
	data = read_fan_file(fan_path)
	grid = data['grid']

	ans_text = grid_to_ansi(grid)

	with open(ans_path,'wb') as f:
		f.write(ans_text.encode('latin-1',errors='replace'))

	print(f'Converted FAN -> ANS. Saved as `{ans_path}`')

	# Export a PNG image if user specified.
	if png_path:
		img = grid_to_image(grid, scale=png_scale)
		img.save(png_path)
		print(f'Saved PNG image as `{png_path}`')

def ans_to_fan(ans_path: str, fan_path: str, png_path: str=None, png_scale: int=1):
	input_extension = os.path.splitext(ans_path)[-1].replace('.','')
	input_type = input_extension.upper()

	# Parse ANS and generate character grid
	with open(ans_path,'r',encoding='latin-1',errors='ignore') as f:
		text = f.read()

	grid = ansi_to_grid(text)

	# To write a FAN file, we need to generate screen data.
	# So we'll render image at scale 1 and convert to planar bitmap bytes.
	img = grid_to_image(grid, scale=1)
	planar = image_to_atari_planar_bytes(img)

	write_fan_file(fan_path, grid, planar)
	print(f'Converted {input_type} -> FAN. Saved as `{fan_path}`')

	# Export a PNG image if user specified.
	if png_path:
		img = grid_to_image(grid, scale=png_scale)
		img.save(png_path)
		print(f'Saved PNG image as `{png_path}`')


# ==================
# MAIN
# ==================

def main():
	# Directory from which the script is running
	script_path = os.path.dirname(os.path.realpath(__file__))

	# Command-line arguments
	parser = argparse.ArgumentParser(
		description='This script converts .ANS files to .FAN, and vice versa.'
	)

	parser.add_argument(
		'input_file', default=None, help='.ANS, .TXT, or .FAN file to be converted.',
	)
	parser.add_argument(
		'-P', '--png', action='store_true', help='Setting this flag will generate a PNG image from the input_file.',
	)
	parser.add_argument(
		'-s', '--scale', nargs=1, default=2, type=int, help='Sets scale of the PNG image, if `--png` flag is set. Defaults to 2 (640x384).',
	)


	args = vars(parser.parse_args())

	input_filepath = os.path.normpath(str(args['input_file']))
	input_filename = os.path.basename(input_filepath)
	input_extension = os.path.splitext(input_filepath)[-1].replace('.','')
	input_type = input_extension.lower()
	ext_upper = input_extension.isupper()

	if input_type not in ['ans','txt','fan']:
		print(f'`{input_type}`')
		raise ValueError(f'Did not process {input_filename}. This script requires an input file ending in .ANS, .TXT, or .FAN. ')

	png_path = None
	if args['png']:
		out_ext = 'png'
		if ext_upper:
			out_ext = out_ext.upper()

		png_path = input_filepath.replace(input_extension, out_ext)

	scale = 2
	if args['scale']:
		scale = int(args['scale'])

	if input_type == 'fan':
		out_ext = 'ans'
		if ext_upper:
			out_ext = out_ext.upper()

		output_filepath = input_filepath.replace(input_extension, out_ext)

		fan_to_ans(
			fan_path=input_filepath,
			ans_path=output_filepath,
			png_path=png_path,
			png_scale=scale,
		)

	elif input_type in ['ans', 'txt']:
		out_ext = 'fan'
		if ext_upper:
			out_ext = out_ext.upper()

		output_filepath = input_filepath.replace(input_extension, out_ext)

		ans_to_fan(
			ans_path=input_filepath,
			fan_path=output_filepath,
			png_path=png_path,
			png_scale=scale,
		)



if __name__ == '__main__':
	main()
